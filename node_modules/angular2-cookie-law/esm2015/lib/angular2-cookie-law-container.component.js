/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * angular2-cookie-law
 *
 * Copyright 2016-2018, @andreasonny83, All rights reserved.
 *
 * @author: @andreasonny83 <andreasonny83@gmail.com>
 */
import { Component, ViewChild, HostBinding, Input, Output, EventEmitter } from '@angular/core';
import { Angular2CookieLawService } from './angular2-cookie-law.service';
import { CookieLawComponent } from './angular2-cookie-law.component';
export class CookieLawContainerComponent {
    /**
     * @param {?} cookieLawService
     */
    constructor(cookieLawService) {
        this.cookieLawService = cookieLawService;
        this.isSeen = new EventEmitter();
        this.name = 'cookieLawSeen'; // set a default cookie name if not provided
        this.seen = true;
    }
    /**
     * @return {?}
     */
    get cookieLawSeen() {
        return this.cookieLawService.seen(this.name);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.seen = this.cookieLawService.seen(this.name);
    }
    /**
     * @return {?}
     */
    hasBeenDismissed() {
        this.cookieLawService.storeCookie(this.name, this.expiration);
        this.seen = true;
        this.isSeen.emit(true);
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.cookieLawComponent.dismiss();
    }
}
CookieLawContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'cookie-law',
                template: `
    <cookie-law-component
      *ngIf="!seen"
      [awsomeCloseIcon]="awsomeCloseIcon"
      [learnMore]="learnMore"
      [target]="target"
      [position]="position"
      (isSeen)="hasBeenDismissed()"
    >
      <ng-content></ng-content>
    </cookie-law-component>
  `
            },] },
];
/** @nocollapse */
CookieLawContainerComponent.ctorParameters = () => [
    { type: Angular2CookieLawService, },
];
CookieLawContainerComponent.propDecorators = {
    "seen": [{ type: HostBinding, args: ['attr.seen',] },],
    "cookieLawComponent": [{ type: ViewChild, args: [CookieLawComponent,] },],
    "name": [{ type: Input },],
    "learnMore": [{ type: Input },],
    "target": [{ type: Input },],
    "position": [{ type: Input },],
    "expiration": [{ type: Input },],
    "awsomeCloseIcon": [{ type: Input },],
    "isSeen": [{ type: Output },],
};
function CookieLawContainerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    CookieLawContainerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    CookieLawContainerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    CookieLawContainerComponent.propDecorators;
    /** @type {?} */
    CookieLawContainerComponent.prototype.seen;
    /** @type {?} */
    CookieLawContainerComponent.prototype.cookieLawComponent;
    /** @type {?} */
    CookieLawContainerComponent.prototype.name;
    /** @type {?} */
    CookieLawContainerComponent.prototype.learnMore;
    /** @type {?} */
    CookieLawContainerComponent.prototype.target;
    /** @type {?} */
    CookieLawContainerComponent.prototype.position;
    /** @type {?} */
    CookieLawContainerComponent.prototype.expiration;
    /** @type {?} */
    CookieLawContainerComponent.prototype.awsomeCloseIcon;
    /** @type {?} */
    CookieLawContainerComponent.prototype.isSeen;
    /** @type {?} */
    CookieLawContainerComponent.prototype.cookieLawService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjItY29va2llLWxhdy1jb250YWluZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItY29va2llLWxhdy8iLCJzb3VyY2VzIjpbImxpYi9hbmd1bGFyMi1jb29raWUtbGF3LWNvbnRhaW5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQ0wsU0FBUyxFQUVULFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFrQnJFLE1BQU07Ozs7SUFnQ0osWUFBb0IsZ0JBQTBDO1FBQTFDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBMEI7c0JBTjlDLElBQUksWUFBWSxFQUFXO1FBT3pDLElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDO1FBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0tBQ2xCOzs7O1FBUFUsYUFBYTtRQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7O0lBUXhDLFFBQVE7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7OztJQUc3QyxnQkFBZ0I7UUFDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7SUFHbEIsT0FBTztRQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7OztZQS9EckMsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0dBV1Q7YUFDRjs7OztZQWxCUSx3QkFBd0I7OztxQkFvQjlCLFdBQVcsU0FBQyxXQUFXO21DQUd2QixTQUFTLFNBQUMsa0JBQWtCO3FCQUc1QixLQUFLOzBCQUdMLEtBQUs7dUJBR0wsS0FBSzt5QkFHTCxLQUFLOzJCQUdMLEtBQUs7Z0NBR0wsS0FBSzt1QkFHTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBhbmd1bGFyMi1jb29raWUtbGF3XG4gKlxuICogQ29weXJpZ2h0IDIwMTYtMjAxOCwgQGFuZHJlYXNvbm55ODMsIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvcjogQGFuZHJlYXNvbm55ODMgPGFuZHJlYXNvbm55ODNAZ21haWwuY29tPlxuICovXG5cbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBWaWV3Q2hpbGQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFuZ3VsYXIyQ29va2llTGF3U2VydmljZSB9IGZyb20gJy4vYW5ndWxhcjItY29va2llLWxhdy5zZXJ2aWNlJztcbmltcG9ydCB7IENvb2tpZUxhd0NvbXBvbmVudCB9IGZyb20gJy4vYW5ndWxhcjItY29va2llLWxhdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29va2llTGF3VGFyZ2V0LCBDb29raWVMYXdQb3NpdGlvbiB9IGZyb20gJy4vZGVmaW5pdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjb29raWUtbGF3JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8Y29va2llLWxhdy1jb21wb25lbnRcbiAgICAgICpuZ0lmPVwiIXNlZW5cIlxuICAgICAgW2F3c29tZUNsb3NlSWNvbl09XCJhd3NvbWVDbG9zZUljb25cIlxuICAgICAgW2xlYXJuTW9yZV09XCJsZWFybk1vcmVcIlxuICAgICAgW3RhcmdldF09XCJ0YXJnZXRcIlxuICAgICAgW3Bvc2l0aW9uXT1cInBvc2l0aW9uXCJcbiAgICAgIChpc1NlZW4pPVwiaGFzQmVlbkRpc21pc3NlZCgpXCJcbiAgICA+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9jb29raWUtbGF3LWNvbXBvbmVudD5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBDb29raWVMYXdDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuc2VlbicpXG4gIHB1YmxpYyBzZWVuOiBib29sZWFuO1xuXG4gIEBWaWV3Q2hpbGQoQ29va2llTGF3Q29tcG9uZW50KVxuICBwdWJsaWMgY29va2llTGF3Q29tcG9uZW50OiBDb29raWVMYXdDb21wb25lbnQ7XG5cbiAgQElucHV0KClcbiAgcHVibGljIG5hbWU6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBwdWJsaWMgbGVhcm5Nb3JlOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHRhcmdldDogQ29va2llTGF3VGFyZ2V0O1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBwb3NpdGlvbjogQ29va2llTGF3UG9zaXRpb247XG5cbiAgQElucHV0KClcbiAgcHVibGljIGV4cGlyYXRpb246IG51bWJlcjtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgYXdzb21lQ2xvc2VJY29uOiBzdHJpbmc7XG5cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBpc1NlZW4gPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgcHVibGljIGdldCBjb29raWVMYXdTZWVuKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNvb2tpZUxhd1NlcnZpY2Uuc2Vlbih0aGlzLm5hbWUpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb29raWVMYXdTZXJ2aWNlOiBBbmd1bGFyMkNvb2tpZUxhd1NlcnZpY2UpIHtcbiAgICB0aGlzLm5hbWUgPSAnY29va2llTGF3U2Vlbic7IC8vIHNldCBhIGRlZmF1bHQgY29va2llIG5hbWUgaWYgbm90IHByb3ZpZGVkXG4gICAgdGhpcy5zZWVuID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNlZW4gPSB0aGlzLmNvb2tpZUxhd1NlcnZpY2Uuc2Vlbih0aGlzLm5hbWUpO1xuICB9XG5cbiAgcHVibGljIGhhc0JlZW5EaXNtaXNzZWQoKTogdm9pZCB7XG4gICAgdGhpcy5jb29raWVMYXdTZXJ2aWNlLnN0b3JlQ29va2llKHRoaXMubmFtZSwgdGhpcy5leHBpcmF0aW9uKTtcbiAgICB0aGlzLnNlZW4gPSB0cnVlO1xuICAgIHRoaXMuaXNTZWVuLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBwdWJsaWMgZGlzbWlzcygpOiB2b2lkIHtcbiAgICB0aGlzLmNvb2tpZUxhd0NvbXBvbmVudC5kaXNtaXNzKCk7XG4gIH1cbn1cbiJdfQ==